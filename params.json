{
  "name": "Deltaengine",
  "tagline": "A 2D/3D Game Engine written in C++!",
  "body": "# DeltaEngine\r\n\r\nA 2D/3D Game Engine written in C++! (in development)\r\n\r\n## Download\r\nTo download just click \"Download as a zip\". To use it you can rebuild the game engine or you can use the DeltaEngine.lib and DeltaEngine.dll files inside \"bin/Debug\".\r\n\r\nKeep in mind that you also will need all the header files. You don't need the .cpp files if you don't want to recompile it.\r\n\r\nAlso, the version inside \"bin/Debug\" is obviously the debug version, it means that the library will output messages for errors into the console window. The release version doesn't output anything at all, even if there is an error, so you can close the console window using `FreeConsole()`\r\n\r\n## Projects inside the solution\r\nThe Visual Studio solution contains two projects:\r\n+ **DeltaEngine**: Contains all the files needed to build the game engine.\r\n+ **Game**: This project is just for testing. It only contains a file, `main.cpp`. I recommend taking a look to it, as it will help you start developing your own game.\r\n\r\n## Quick Start\r\n### Creating a window\r\nTo create a window you will have to import the library file. Just add this line to the top:\r\n```cpp\r\n#include \"window.h\"\r\n```\r\n\r\nThen, create an instance of the class `Window`. This class is inside the namespace `DeltaEngine::Graphics`, so you will need to call `DeltaEngine::Graphics::Window`:\r\n```cpp\r\n#include <string>\r\n#include \"window.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  int height = 960;\r\n  int width = 540;\r\n  DeltaEngine::Graphics::Window myWindow(std::string(\"Window title\"), height, width);\r\n  \r\n  return 0;\r\n}\r\n```\r\n\r\nYou need the `#include <string>` statement because the window title is an `std::string`.\r\n\r\n### Initializing the library\r\nYou have to call `DeltaEngine::init(int argc, char* argv[])` after you create your window, but **before** you call any OpenGL function.\r\n\r\nThe library itself doesn't need any initialization, but GLEW does, so I created this little inline function to initialize OpenGL.\r\n\r\nTo call this function, you have to include `DeltaEngine.h` and GLEW (normally `glew.h`).\r\n\r\nAll the GLEW files I use are inside \"dependencies/include/GLEW\" for the header files, and \"dependencies/lib/GLEW\" for the static library version. If you want to use those files, remember to add the `GLEW_STATIC` define for the project. To do this, go to your project properties -> click on \"C/C++\" -> Select the \"Preprocessor\" page -> Add `GLEW_STATIC` to the preprocessor definitions.\r\n\r\n### Keyboard and mouse input\r\nTo install keyboard, you just need to call the `installKeyboard()` method of your window, for example:\r\n```cpp\r\n#include <string>\r\n#include \"window.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  int height = 960;\r\n  int width = 540;\r\n  DeltaEngine::Graphics::Window myWindow(std::string(\"Window title\"), height, width);\r\n  \r\n  myWindow.installKeyboard();\r\n  // Now the keyboard is installed, you can read keys\r\n  \r\n  return 0;\r\n}\r\n```\r\n\r\nSame with the mouse, but instead of calling `installKeyboard()` call `installMouse()`.\r\n\r\nTo read the state of a key, just call `isKeyPressed(int key)`. This will return true if the key is pressed, false otherwise.\r\n\r\nTo get the position of the mouse use the function `win.getMousePosition(int& x, int& y)`. This function takes two arguments by reference, and does not return anything, just sets the value of the X coordinate and Y coordinate in `x` and `y`. Here's an example:\r\n\r\n```cpp\r\n#include <string>\r\n#include <iostream>\r\n\r\n#include \"window.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  int height = 960;\r\n  int width = 540;\r\n  DeltaEngine::Graphics::Window myWindow(std::string(\"Window title\"), height, width);\r\n  \r\n  myWindow.installMouse();\r\n  // Now the mouse is installed, we can read the mouse position and scroll\r\n  \r\n  float mouseX;\r\n  float mouseY;\r\n  \r\n  myWindow.getMousePosition(mouseX, mouseY);\r\n  \r\n  std::cout << \"Mouse position: X=\" << mouseX << \" Y=\" << mouseY << std::endln;\r\n  \r\n  return 0;\r\n}\r\n```\r\n\r\n### Creating a basic game loop\r\nBecause we want our game to be running until the player closes the window, we need a loop\r\n\r\nThe method `closed()` of the class `Window` allows us to know the state of the window, so we can create our `while` loop using it.\r\n\r\nInside the loop we will check for input, check for errors... and also update our window. This is easily done by calling `update()`:\r\n\r\n```cpp\r\n#include <string>\r\n#include \"window.h\"\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  int height = 960;\r\n  int width = 540;\r\n  DeltaEngine::Graphics::Window myWindow(std::string(\"Window title\"), height, width);\r\n  \r\n  while(myWindow.closed == false)\r\n  {\r\n    // Check for input, such as keyboard, mouse... \r\n    \r\n    // Update our window so it doesn't freeze\r\n    myWindow.update();\r\n  }\r\n  \r\n  return 0;\r\n}\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}